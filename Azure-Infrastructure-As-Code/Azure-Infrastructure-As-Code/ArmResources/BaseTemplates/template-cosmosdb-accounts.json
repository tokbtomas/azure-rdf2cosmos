{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "artifactsSaBaseUri": {
      "type": "string"
    },
    "artifactsSaSasToken": {
      "type": "securestring"
    },
    "accountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the Cosmos DB account."
      }
    },
    "enableFreeTier": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies the if you would like to use the free tier for Cosmos."
      }
    },
    "enableAnalyticalStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies the if you would like to enable Azure Synapse."
      }
    },
    "cosmosAPIType": {
      "type": "string",
      "defaultValue": "MongoDB"
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "defaultValue": "Session",
      "allowedValues": [
        "Eventual",
        "ConsistentPrefix",
        "Session",
        "BoundedStaleness",
        "Strong"
      ],
      "metadata": {
        "description": "The default consistency level of the Cosmos DB account."
      }
    },
    "locations": {
      "type": "Object",
      "metadata": {
        "description": "Regions for Cosmos Db to be Replicated"
      }
    },
    "ipRules": {
      "type": "Object",
      "metadata": {
        "description": "an Object with all the ipRules"
      }
    },
    "APICapability": {
      "type": "string",
      "defaultValue": "Nothing",
      "allowedValues": [
        "Nothing",
        "EnableGremlin",
        "EnableCassandra",
        "EnableTable"
      ],
      "metadata": {
        "description": "This is use to passed a value to enable SQL API api capabilities like table API"
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "defaultValue": 100,
      "minValue": 10,
      "maxValue": 2147483647,
      "metadata": {
        "description": "Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
      }
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 5,
      "maxValue": 86400,
      "metadata": {
        "description": "Max lag time (seconds). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
      }
    },
    "resourceNames": {
      "type": "Object",
      "defaultValue": {},
      "metadata": {
        "description": "to Get the Keyvault where to store the secrets"
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "workspaceID",
      "metadata": {
        "description": "Full Resource ID for the Log Analytics workspace "
      }
    },
    "logsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "the number of days for the logs to be retained if diagnostics is set to storage account"
      }
    }
  },
  "variables": {
    "cosmosAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.DocumentDB/databaseAccounts/', parameters('accountName'))]",
    "consistencyPolicy": {
      "Eventual": {
        "defaultConsistencyLevel": "Eventual"
      },
      "ConsistentPrefix": {
        "defaultConsistencyLevel": "ConsistentPrefix"
      },
      "Session": {
        "defaultConsistencyLevel": "Session"
      },
      "BoundedStaleness": {
        "defaultConsistencyLevel": "BoundedStaleness",
        "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
        "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
      },
      "Strong": {
        "defaultConsistencyLevel": "Strong"
      }
    },
    "APICapability": {
      "name": "[parameters('APICapability')]"
    },
    "configurationProperties": {
      "enableFreeTier": "[parameters('enableFreeTier')]",
      "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
      "databaseAccountOfferType": "Standard",
      "enableAnalyticalStorage": "[parameters('enableAnalyticalStorage')]",
      "locations": "[parameters('locations').value]",
      "ipRules": "[parameters('ipRules').value]"
    },
    "configurationPropertiesWithCapabilities": {
      "capabilities": [ "[variables('APICapability')]" ],
      "enableFreeTier": "[parameters('enableFreeTier')]",
      "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]",
      "databaseAccountOfferType": "Standard",
      "enableAnalyticalStorage": "[parameters('enableAnalyticalStorage')]",
      "locations": "[parameters('locations').value]",
      "ipRules": "[parameters('ipRules').value]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[parameters('accountName')]",
      "apiVersion": "2020-04-01",
      "location": "[parameters('location')]",
      "kind": "[parameters('cosmosAPIType')]",
      "properties": "[if(equals(parameters('APICapability'),'Nothing'),variables('configurationProperties'),variables('configurationPropertiesWithCapabilities'))]"
    },
    {
      "condition": "[not(equals(parameters('workspaceId'),'workspaceID'))]",
      "name": "[concat(parameters('accountName'), '/Microsoft.Insights/',parameters('accountName'),'-Diagnostics')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/providers/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "dependsOn": [
        "[concat('Microsoft.DocumentDB/databaseAccounts/', parameters('accountName'))]"
      ],
      "properties": {
        "workspaceId": "[parameters('workspaceId')]",
        "logAnalyticsDestinationType": "Dedicated",
        "logs": [
          {
            "category": "DataPlaneRequests",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "MongoRequests",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "QueryRuntimeStatistics",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "PartitionKeyStatistics",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "ControlPlaneRequests",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "CassandraRequests",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "GremlinRequests",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "TableApiRequests",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          },
          {
            "category": "PartitionKeyRUConsumption",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": true
            }
          }
        ],
        "metrics": [
          {
            "category": "Requests",
            "enabled": true,
            "retentionPolicy": {
              "days": "[parameters('logsRetentionDays')]",
              "enabled": false
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('resourceNames')))]",
      "name": "[take(concat('AddCosmosDbSecrets-ToKeyvault-',deployment().Name),60)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[if(empty(parameters('resourceNames')),'',parameters('resourceNames').commonResourceGroupName)]",
      "apiVersion": "2018-05-01",
      "dependsOn": [
        "[concat('Microsoft.DocumentDB/databaseAccounts/', parameters('accountName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('artifactsSaBaseUri'), parameters('resourceNames').baseTemplatePath, 'template-keyVault-secrets.json', parameters('artifactsSaSasToken'))]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('resourceNames').appKeyVaultName]"
          },
          "secretsObject": {
            "value": {
              "secrets": [
                {
                  "secretName": "[concat('kv-',parameters('accountName'),'-ReadWrite-PrimaryConnectionString')]",
                  "secretValue": "[listConnectionStrings(variables('cosmosAccountid'),'2019-12-12').connectionStrings[0].connectionString]"
                },
                {
                  "secretName": "[concat('kv-',parameters('accountName'),'-ReadWrite-SecondaryConnectionString')]",
                  "secretValue": "[listConnectionStrings(variables('cosmosAccountid'),'2019-12-12').connectionStrings[1].connectionString]"
                },
                {
                  "secretName": "[concat('kv-',parameters('accountName'),'-ReadOnly-PrimaryConnectionString')]",
                  "secretValue": "[listConnectionStrings(variables('cosmosAccountid'),'2019-12-12').connectionStrings[2].connectionString]"
                },
                {
                  "secretName": "[concat('kv-',parameters('accountName'),'-ReadOnly-SecondaryConnectionString')]",
                  "secretValue": "[listConnectionStrings(variables('cosmosAccountid'),'2019-12-12').connectionStrings[3].connectionString]"
                }
              ]
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "cosmosDbResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
    }
  }
}